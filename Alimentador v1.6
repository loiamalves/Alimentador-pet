/**********
  IFG Campus Goiânia
  Autor:  Loiam Alves (loiamalves@gmail.com)
  Versão: 1.5
  Objetivo: Estabelecer conexão com o Whatsapp e servidor NTP; realizar a leitura dos sensores HC-SR04 e DHT11; sincronizar com o broker MQTT;
  acionar o alimentador no horário agendado.
  Inspirado nos projetos:  
            https://www.techtonions.com/esp32-sending-alert-message-to-whatsapp/
            http://lucstechblog.blogspot.com/2021/05/esp8266-and-esp32-sending-messages-to.html
            https://www.curtocircuito.com.br/blog/Categoria%20IoT/monitoramento-e-controle-por-aplicativo-mqtt
            http://www.ardublog.com/library-for-arduino-ultrasonic-ranging-hc-sr04/#comment-61299
*********/

//---------------------------Inclui as Bibliotecas-------------------------------------------------------------------------
#include <TimeLib.h>
#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
#include <PubSubClient.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>
#include <Ultrasonic.h> //Inclui a Biblioteca para HR-SC04 disponibilizada por J.Rodrigo (www.jrodrigo.net)
#include <ESP8266HTTPClient.h> //Inclui a Biblioteca HTTP

#define DHTTYPE DHT11     // Define o modelo DHT 11
#define DHTPIN D1         // Define o pino de conexão do sensor no ESP8266
#define Ref_1  7 //define o parâmetro de referência para determinar se o nível no alimentador está alto ou baixo


Ultrasonic Sensor1(D8,D6);   // (Trig_1,Echo_1) Sensor de aproximação do animal
Ultrasonic Sensor2(D5,D7);  // (Trig_2 PIN,Echo_2) Nível da ração

// Define as variáveis para temperatura, umidade e luminosidade
float temp;
float hum;

//---------------------------Configuração CallMeBot------------------------------------------------------------------
String url; //Define a váriável "url" com uma string
String apiKey = "595473";              //Define a chave enviada pelo CallMeBot
String telefone = "+556298158871"; //Define o numero do WhatsApp

//---------------------------Define o horário de alimentação------------------------------------------------------------------
float hora1 = 12;
float min1 = 00; 
float hora2 = 20; 
float min2 = 00; 
//-------------------------
#define MSG_BUFFER_SIZE (50)
char msg[MSG_BUFFER_SIZE];

DHT_Unified dht(DHTPIN, DHTTYPE);                                                                 
uint32_t delayMS;  

const char ssid[] = "ULTRA-FFD3";  //  your network SSID (name)
const char pass[] = "31005119";       // your network password
const char* mqtt_server = "broker.mqtt-dashboard.com"; 

WiFiClient espClient;                                                                             
PubSubClient client(espClient);                                                                   
unsigned long lastMsg = 0;                                                                        
int value = 0;                                                                                    

char RELE;

static const char ntpServerName[] = "200.160.7.186"; // Servidor NTP:

const int timeZone = -3;   

WiFiUDP Udp;
unsigned int localPort = 8888;  // local port to listen for UDP packets

time_t getNtpTime();
void digitalClockDisplay();
void printDigits(int digits);
void sendNTPpacket(IPAddress &address);

//---------------------------Define as mensagens-------------------------------------------------------------------------
/*
frase 1 - alimentador alto,  temperatura elevada
frase 2 - alimentador baixo, temperatura elevada
frase 3 - alimentador alto,  temperatura agradável
frase 4 - alimentador baixo, temperatura agradável
frase 5 - não há comida no alimentador
 */

String frase1 = "%2AMeg%2A%20est%C3%A1%20se%20alimentando%20agora%21%21%21%20%0AN%C3%ADvel%20de%20ra%C3%A7%C3%A3o%3A%20%2Aalto%2A%0ATemperatura%20%2Aelevada%2A";

String frase2 = "%2AMeg%2A%20est%C3%A1%20se%20alimentando%20agora%21%21%21%20%0AN%C3%ADvel%20de%20ra%C3%A7%C3%A3o%3A%20%2Abaixo%2A%0ATemperatura%20%2Aelevada%2A";
 
String frase3 = "%2AMeg%2A%20est%C3%A1%20se%20alimentando%20agora%21%21%21%20%0AN%C3%ADvel%20de%20ra%C3%A7%C3%A3o%3A%20%2AAlto%2A%0ATemperatura%20%2Aagrad%C3%A1vel%2A";

String frase4 = "%2AMeg%2A%20est%C3%A1%20se%20alimentando%20agora%21%21%21%20%0AN%C3%ADvel%20de%20ra%C3%A7%C3%A3o%3A%20%2Abaixo%2A%0ATemperatura%20%2Aagrad%C3%A1vel%2A";

String frase5 = "%E2%9A%A0%EF%B8%8FAten%C3%A7%C3%A3o%E2%9A%A0%EF%B8%8F%0AN%C3%A3o%20h%C3%A1%20ra%C3%A7%C3%A3o%20no%20alimentador%21%21%21";

//---------------------------Setup----------------------------------------------------------------------------------------------
void setup()
{
  Serial.begin(115200);
  while (!Serial) ; 
  delay(250);
  
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, pass);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.print("IP number assigned by DHCP is ");
  Serial.println(WiFi.localIP());
  Serial.println("Starting UDP");
  Udp.begin(localPort);
  Serial.print("Local port: ");
  Serial.println(Udp.localPort());
  Serial.println("waiting for sync");
  setSyncProvider(getNtpTime);
  setSyncInterval(300);
//---------------------------------------------
  dht.begin();                                                                                    
  Serial.println(F("Sensor DHT11"));                                                              
  sensor_t sensor;                                                                                
 
  dht.temperature().getSensor(&sensor);                                                           
  dht.humidity().getSensor(&sensor);                                                              
  delayMS = sensor.min_delay / 1000;        
  
  RELE = D0;                                                                                       
  pinMode(RELE, OUTPUT);                                                                                                                                                     
  digitalWrite(RELE, HIGH); //Inicializa com o relé desligado
  //setup_wifi();                                                                                   
  client.setServer(mqtt_server, 1883);                                                            
  client.setCallback(callback); 
}

void callback(char* topic, byte* payload, unsigned int length) {                                  
  Serial.print("Mensagem recebida [");                                                            
  Serial.print(topic);                                                                            
  Serial.print("] ");                                                                             
  for (int i = 0; i < length; i++) {                                                              
    Serial.print((char)payload[i]);                                                               
  }
  Serial.println("");                                                                             
  if ((char)payload[0] == 'S') {                                                                  
    digitalWrite(RELE, LOW);          //Liga o relé                                                           
    snprintf (msg, MSG_BUFFER_SIZE, "O alimentador está ligado");                                 
    Serial.print("Publica mensagem: ");                                                           
    Serial.println(msg);                                                                          
    client.publish("alimentador_pet/alimentador", msg);                                                             
  }
  Serial.println("");                                                                             
  if ((char)payload[0] == 's') {  //"s minusculo                                                                
    digitalWrite(RELE, HIGH);         //Desliga o relé                                                               
    snprintf (msg, MSG_BUFFER_SIZE, "O alimentador está  desligado");                              
    Serial.print("Publica mensagem: ");                                                           
    Serial.println(msg);                                                                          
    client.publish("alimentador_pet/alimentador", msg);                                                             
  }
  
}

void reconnect() {                                                                                
  while (!client.connected()) {                                                                   
    Serial.print("Aguardando conexão MQTT...");                                                   
    String clientId = "ESP8266Client";                                       
    clientId += String(random(0xffff), HEX);                                                      
    if (client.connect(clientId.c_str())) {                                                       
      Serial.println("conectado");                                                                
      client.subscribe("alimentador_pet/alimentador");                                                         
    } else {                                                                                      
      Serial.print("falhou, rc=");                                                                
      Serial.print(client.state());                                                               
      Serial.println("tente novamente em 5s");                                                    
      delay(5000);                                                                                
    }
  }
}
time_t prevDisplay = 0; // when the digital clock was displayed
//-------------------Inicio do Loop-------------------------
void loop()
{
  
  if (timeStatus() != timeNotSet) {
    if (now() != prevDisplay) { //update the display only if time has changed
      prevDisplay = now();
      digitalClockDisplay();
    }
  }
//-------------------loop/Leitura DHT11--------------------------------------------------
 delay(delayMS);                                                                                 
  sensors_event_t event;                                                                          
  dht.temperature().getEvent(&event);                                                             
  if (isnan(event.temperature)) {                                                                 
    Serial.println(F("Erro na leitura da temperatura!"));                                         
  }
  else {                                                                                          
    Serial.print(F("Temperatura: "));                                                             
    Serial.print(event.temperature);                                                              
    Serial.print(F("°C   "));                                                                      
    sprintf(msg,"%f",event.temperature);                                                          
    client.publish("alimentador_pet/dht/temperatura", msg); 
    temp = event.temperature;                                                     
  }
  dht.humidity().getEvent(&event);                                                                
  if (isnan(event.relative_humidity)) {                                                           
    Serial.println(F("Erro na leitura da umidade!"));                                             
  }
  else {                                                                                          
    Serial.print(F("Umidade: "));                                                                 
    Serial.print(event.relative_humidity);                                                        
    Serial.print(F("%  "));                                                                       
    sprintf(msg,"%f",event.relative_humidity);                                                    
    client.publish("alimentador_pet/dht/umidade", msg);
    hum = event.relative_humidity;                                                          
  }
  if (!client.connected()) {                                                                      
    reconnect();                                                                                  
  }
  client.loop();

 //---------------------------loop/Leitura HC-SR04-------------------------------------------------------------------------  
  
      
      int Sensor_1 = Sensor1.Ranging(CM); //variável Sensor_1 armazena a leitura do Sensor de aproximação do animal
      int Sensor_2 = Sensor2.Ranging(CM); //variável Sensor_2 armazena a leitura do Sensor do nível de ração
      Serial.print("  Distancia_1: "); //imprime no serial a distãncia no Sensor de aproximação do animal
      Serial.print(Sensor_1); 
      Serial.print(" cm   " );
      Serial.print("Distancia_2: "); //imprime no serial a distãncia no alimentador
      Serial.print(Sensor_2); 
      Serial.println(" cm   " );
      //---------------------------loop/verifica agenda de alimentação-------------------------------------------------------------------------  
         if ((hora1==hour())&&(min1==minute())&& (second()==0)) //verifica se está no horario cadastrado
            {
           digitalWrite(RELE, LOW); //Liga o alimentador
           delay(90000); //o alimentador fica ligado por 1,5 minutos
           digitalWrite(RELE, HIGH); //Desliga o alimentador
           if ((Sensor_2 > 12)&& (Sensor_2 < 30))  //Verifica se o alimentador está vazio e a tampa está fechada
                {
                  Serial.println("Não há ração no alimentador");
                  HTTPClient http;
                  WiFiClient client;
                  url = "http://api.callmebot.com/whatsapp.php?phone=" + telefone + "&apikey=" + apiKey + "&text=" + frase5;
                  WiFiClient wifiClient;
                   http.begin(wifiClient, url);
                 
                  int httpCode = http.GET();
                      if(httpCode>0)
                      {
                          String payload = http.getString();
                          Serial.println(payload);
                      }
                  http.end();
                
                }
            }
            if ((hora2==hour())&&(min2==minute())&& (second()==0)) //verifica se está no horario cadastrado
            {
           digitalWrite(RELE, LOW); //Liga o alimentador
           delay(90000); //o alimentador fica ligado por 1,5 minutos
           digitalWrite(RELE, HIGH); //Desliga o alimentador
            
            if ((Sensor_2 > 12)&& (Sensor_2 < 30))  //Verifica se o alimentador está vazio e a tampa está fechada
                {
                  Serial.println("Não há ração no alimentador");
                  HTTPClient http;
                  WiFiClient client;
                  url = "http://api.callmebot.com/whatsapp.php?phone=" + telefone + "&apikey=" + apiKey + "&text=" + frase5;
                  WiFiClient wifiClient;
                   http.begin(wifiClient, url);
                 
                  int httpCode = http.GET();
                      if(httpCode>0)
                      {
                          String payload = http.getString();
                          Serial.println(payload);
                      }
                  http.end();
                }
                }
      //---------------------------loop/Tomada de decisões 1-------------------------------------------------------------------------
          if (Sensor_1 < 15) //Compara se o animal está a menos de 15cm de distância do alimentador
           {
            if (Sensor_2 < 30) //Verifica se a tampa do alimentador está aberta
             { 
             if ((Sensor_2 < Ref_1)&& (temp> 30.00))//Nível no alimentador alto e temperatura alta
                {
                  
                Serial.println("nível no Alimentador alto");
                Serial.println("Meg está se alimentando");
                Serial.println("Ambiente quente"); 
                     
                  
//---------------------------Envio Whatsapp 1-------------------------------------------------------------------------
                  HTTPClient http;
                  WiFiClient client;
                  url = "http://api.callmebot.com/whatsapp.php?phone=" + telefone + "&apikey=" + apiKey + "&text=" + frase1;
                  WiFiClient wifiClient;
                   http.begin(wifiClient, url);
                 
                  int httpCode = http.GET();
                      if(httpCode>0)
                      {
                          String payload = http.getString();
                          Serial.println(payload);
                       }
                  http.end(); 
                  delay(120000); //Delay 2 minutos
                
                 }
//---------------------------loop/Tomada de decisões 2-------------------------------------------------------------------------

                  if ((Sensor_2 > Ref_1)&& (temp> 30.00))////Nível no alimentador baixo e temperatura alta
                  {
                  Serial.println("nível no Alimentador baixo");
                  Serial.println("Meg está se alimentando");
                  Serial.println("Ambiente quente");
                
//---------------------------loop/Envio Whatsapp 2-------------------------------------------------------------------------  
                  HTTPClient http;
                  WiFiClient client;
                  url = "http://api.callmebot.com/whatsapp.php?phone=" + telefone + "&apikey=" + apiKey + "&text=" + frase2;
                  WiFiClient wifiClient;
                   http.begin(wifiClient, url);
                 
                  int httpCode = http.GET();
                      if(httpCode>0)
                      {
                          String payload = http.getString();
                          Serial.println(payload);
                  }
                  http.end(); 
                  
                  delay(120000); //Delay 2 minutos
                   }
                 
//---------------------------loop/Tomada de decisões 3-------------------------------------------------------------------------
          
          if ((Sensor_2 < Ref_1)&& (temp< 30.00))//Nível no alimentador alto e temperatura baixa
                {
                  
                Serial.println("nível no Alimentador alto");
                Serial.println("Meg está se alimentando");
                Serial.println("Ambiente agradável"); 
                     
                 
//---------------------------loop/Envio Whatsapp 3-------------------------------------------------------------------------
                  HTTPClient http;
                  WiFiClient client;
                  url = "http://api.callmebot.com/whatsapp.php?phone=" + telefone + "&apikey=" + apiKey + "&text=" + frase3;
                  WiFiClient wifiClient;
                   http.begin(wifiClient, url);
                 
                  int httpCode = http.GET();
                      if(httpCode>0)
                      {
                          String payload = http.getString();
                          Serial.println(payload);
                      }
                  http.end(); 
                  delay(120000); //Delay 2 minutos

                 }
//---------------------------loop/Tomada de decisões 4-------------------------------------------------------------------------

                  if ((Sensor_2 > Ref_1)&& (temp< 30.00))////Nível no alimentador baixo e temperatura baixa
                  {
                  Serial.println("nível no Alimentador baixo");
                  Serial.println("Meg está se alimentando");
                  Serial.println("Ambiente agradável");
                  
//---------------------------loop/Envio Whatsapp 4------------------------------------------------------------------------- 
                  HTTPClient http;
                  WiFiClient client;
                  url = "http://api.callmebot.com/whatsapp.php?phone=" + telefone + "&apikey=" + apiKey + "&text=" + frase4;
                  WiFiClient wifiClient;
                   http.begin(wifiClient, url);
                 
                  int httpCode = http.GET();
                      if(httpCode>0)
                      {
                          String payload = http.getString();
                          Serial.println(payload);
                      }
                  http.end();
                  delay(120000); //Delay 2 minutos

                 }
                 
                if (Sensor_2 > 12)  //Verifica se o alimentador está vazio
                {
                  Serial.println("Não há ração no alimentador");
                  HTTPClient http;
                  WiFiClient client;
                  url = "http://api.callmebot.com/whatsapp.php?phone=" + telefone + "&apikey=" + apiKey + "&text=" + frase5;
                  WiFiClient wifiClient;
                   http.begin(wifiClient, url);
                 
                  int httpCode = http.GET();
                      if(httpCode>0)
                      {
                          String payload = http.getString();
                          Serial.println(payload);
                      }
                  http.end();
                  delay(120000); //Delay 2 minutos
                }
           }
           }     
      
} //Fim do loop

void digitalClockDisplay()
{
  // digital clock display of the time
  Serial.print(hour());
  printDigits(minute());
  printDigits(second());
  Serial.print(" ");
  Serial.print(day());
  Serial.print("/");
  Serial.print(month());
  Serial.print("/");
  Serial.print(year());
  Serial.print(" ");
}

void printDigits(int digits)
{
  // utility for digital clock display: prints preceding colon and leading 0
  Serial.print(":");
  if (digits < 10)
    Serial.print('0');
  Serial.print(digits);
}

/*------------------------------- NTP code ----------------------------------*/

const int NTP_PACKET_SIZE = 48; // NTP time is in the first 48 bytes of message
byte packetBuffer[NTP_PACKET_SIZE]; //buffer to hold incoming & outgoing packets

time_t getNtpTime()
{
  IPAddress ntpServerIP; // NTP server's ip address

  while (Udp.parsePacket() > 0) ; // discard any previously received packets
  Serial.println("Transmit NTP Request");
  // get a random server from the pool
  WiFi.hostByName(ntpServerName, ntpServerIP);
  Serial.print(ntpServerName);
  Serial.print(": ");
  Serial.println(ntpServerIP);
  sendNTPpacket(ntpServerIP);
  uint32_t beginWait = millis();
  while (millis() - beginWait < 1500) {
    int size = Udp.parsePacket();
    if (size >= NTP_PACKET_SIZE) {
      Serial.println("Receive NTP Response");
      Udp.read(packetBuffer, NTP_PACKET_SIZE);  // read packet into the buffer
      unsigned long secsSince1900;
      // convert four bytes starting at location 40 to a long integer
      secsSince1900 =  (unsigned long)packetBuffer[40] << 24;
      secsSince1900 |= (unsigned long)packetBuffer[41] << 16;
      secsSince1900 |= (unsigned long)packetBuffer[42] << 8;
      secsSince1900 |= (unsigned long)packetBuffer[43];
      return secsSince1900 - 2208988800UL + timeZone * SECS_PER_HOUR;
    }
  }
  Serial.println("No NTP Response :-(");
  return 0; // return 0 if unable to get the time
}

// send an NTP request to the time server at the given address
void sendNTPpacket(IPAddress &address)
{
  // set all bytes in the buffer to 0
  memset(packetBuffer, 0, NTP_PACKET_SIZE);
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  packetBuffer[0] = 0b11100011;   // LI, Version, Mode
  packetBuffer[1] = 0;     // Stratum, or type of clock
  packetBuffer[2] = 6;     // Polling Interval
  packetBuffer[3] = 0xEC;  // Peer Clock Precision
  // 8 bytes of zero for Root Delay & Root Dispersion
  packetBuffer[12] = 49;
  packetBuffer[13] = 0x4E;
  packetBuffer[14] = 49;
  packetBuffer[15] = 52;
  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  Udp.beginPacket(address, 123); //NTP requests are to port 123
  Udp.write(packetBuffer, NTP_PACKET_SIZE);
  Udp.endPacket();
}